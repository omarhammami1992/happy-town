plugins {
    id "java"
    id "application"
    id "org.springframework.boot" version "2.1.4.RELEASE"
}

ext {
    assertjVersion = '3.12.2'
    fakesmtpVersion = '0.1.1'
    h2Version = '1.4.199'
    junitVersion = '5.4.1'
    logbackVersion = '1.2.3'
    mailVersion = '1.4.7'
    mockitoVersion = '2.27.0'
    springBootVersion = '2.1.4.RELEASE'
    swaggerVersion = '2.9.2'
}

group = 'com.happytown'
version = '1.0.0'
sourceCompatibility = '11'
mainClassName= 'com.happytown.Application'

repositories {
    mavenCentral()
}

dependencies {

    // Spring
    implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"

    // Database
    implementation "com.h2database:h2:${h2Version}"

    // Mail
    implementation "javax.mail:mail:${mailVersion}"

    // Tools
    implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
    implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"

    // Tests
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-migrationsupport:${junitVersion}"
    testImplementation "com.github.sleroy:fakesmtp-junit-runner:${fakesmtpVersion}"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

task checkCleanArchi(type: Exec) {
    commandLine 'tools/check-hexagonaleArchi.sh'
}
check.dependsOn checkCleanArchi

wrapper {
    gradleVersion = '5.3.1'
}
